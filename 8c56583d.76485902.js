(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{187:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var o=n(2),r=n(6),a=(n(0),n(257)),i={id:"debugging",title:"Debugging",sidebar_label:"Debugging"},b={id:"version-4.x/development/debugging",title:"Debugging",description:"## Debug client side code",source:"@site/versioned_docs/version-4.x/development/debugging.md",permalink:"/yoshi/docs/development/debugging",editUrl:"https://github.com/wix/yoshi/edit/master/website/versioned_docs/version-4.x/development/debugging.md",version:"4.x",lastUpdatedBy:"Ran Yitzhaki",lastUpdatedAt:1592233389,sidebar_label:"Debugging",sidebar:"version-4.x/docs",previous:{title:"Environment Variables",permalink:"/yoshi/docs/development/environment-variables"},next:{title:"HMR",permalink:"/yoshi/docs/development/hmr"}},c=[{value:"Debug client side code",id:"debug-client-side-code",children:[]},{value:"Debug server side code",id:"debug-server-side-code",children:[]},{value:"Debug tests code",id:"debug-tests-code",children:[{value:"Debugging Puppeteer E2E tests",id:"debugging-puppeteer-e2e-tests",children:[]}]},{value:"Debug Yoshi&#39;s code",id:"debug-yoshis-code",children:[]},{value:"Inspector clients",id:"inspector-clients",children:[]}],s={rightToc:c};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"debug-client-side-code"},"Debug client side code"),Object(a.b)("p",null,"Run the following command and open devtools on your browser."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"yoshi start\n")),Object(a.b)("p",null,"You can run the following command in case you want to debug your production bundle:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"yoshi start --production\n")),Object(a.b)("h2",{id:"debug-server-side-code"},"Debug server side code"),Object(a.b)("p",null,"Run the following command and yoshi will run your development app server with a ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://nodejs.org/en/docs/guides/debugging-getting-started/#enable-inspector"}),"node inspector")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"yoshi start --debug\n")),Object(a.b)("p",null,"Using the following command the server process won't start until a debugger will be attached."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"yoshi start --debug-brk\n")),Object(a.b)("p",null,"Make sure to configure one of the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"#inspector-clients"}),"inspector clients")," and you'll debug in no time."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"You can configure the default inspector port by: ",Object(a.b)("inlineCode",{parentName:"p"},"--debug=XXXX")," / ",Object(a.b)("inlineCode",{parentName:"p"},"--debug-brk=XXXX")," (default: 9229)")),Object(a.b)("h2",{id:"debug-tests-code"},"Debug tests code"),Object(a.b)("p",null,"Same as for ",Object(a.b)("inlineCode",{parentName:"p"},"yoshi start")," but for the test runner (",Object(a.b)("inlineCode",{parentName:"p"},"jest"),"/",Object(a.b)("inlineCode",{parentName:"p"},"mocha"),") instead of the app server process."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"yoshi test --debug\n")),Object(a.b)("p",null,"or"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"yoshi test --debug-brk\n")),Object(a.b)("p",null,"Make sure to configure one of the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"#inspector-clients"}),"inspector clients")," and you'll debug in no time."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"You can configure the default inspector port by: ",Object(a.b)("inlineCode",{parentName:"p"},"--debug=XXXX")," / ",Object(a.b)("inlineCode",{parentName:"p"},"--debug-brk=XXXX")," (default: 9229)")),Object(a.b)("h3",{id:"debugging-puppeteer-e2e-tests"},"Debugging Puppeteer E2E tests"),Object(a.b)("p",null,"Set ",Object(a.b)("inlineCode",{parentName:"p"},"devtools: true")," in ",Object(a.b)("inlineCode",{parentName:"p"},"jest-yoshi.config")),Object(a.b)("h4",{id:"watch-mode"},"Watch mode"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Run ",Object(a.b)("inlineCode",{parentName:"li"},"yoshi test --watch")," to run in watch mode"),Object(a.b)("li",{parentName:"ul"},"Press ",Object(a.b)("inlineCode",{parentName:"li"},"d")," in the watch menu to activate debug mode")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"You don't need to configure ",Object(a.b)("inlineCode",{parentName:"p"},"devtools: true")," in this mode")),Object(a.b)("h4",{id:"add-breakpoint-in-the-browser-from-your-test"},"Add breakpoint in the browser from your test"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"In order to add a breakpoint that stops in the browser, add ",Object(a.b)("inlineCode",{parentName:"li"},"await debugBrowser();")," to your test.")),Object(a.b)("h2",{id:"debug-yoshis-code"},"Debug Yoshi's code"),Object(a.b)("p",null,"We're using the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/visionmedia/debug"}),"debug")," package to output verbose logs that would help to debug yoshi internal processes."),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"DEBUG=yoshi:*")," before running a command to opt into the verbose debugging mode."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"DEBUG=yoshi:* yoshi build\n")),Object(a.b)("h2",{id:"inspector-clients"},"Inspector clients"),Object(a.b)("p",null,"In order to debug, you need to attach node's inspector to one of the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://nodejs.org/en/docs/guides/debugging-getting-started/#inspector-clients"}),"Inspector Clients"),". Here are guides for the populer clients in Wix:"),Object(a.b)("h4",{id:"chrome-devtools-55"},Object(a.b)("a",Object(o.a)({parentName:"h4"},{href:"https://github.com/ChromeDevTools/devtools-frontend"}),"Chrome DevTools")," ",Object(a.b)("a",Object(o.a)({parentName:"h4"},{href:"https://nodejs.org/en/docs/guides/debugging-getting-started/#chrome-devtools-55"}),"55+")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Option 1"),": Open ",Object(a.b)("inlineCode",{parentName:"li"},"chrome://inspect")," in a Chromium-based browser. Click the Configure button and ensure your target host and port are listed."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Option 2 - \u2705 Recommended"),": Install the Chrome Extension NIM (Node Inspector Manager):",Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://chrome.google.com/webstore/detail/nim-node-inspector-manage/gnhhdgbaldcilmgcpfddgdbkhjohddkj"}),"https://chrome.google.com/webstore/detail/nim-node-inspector-manage/gnhhdgbaldcilmgcpfddgdbkhjohddkj"))),Object(a.b)("h4",{id:"visual-studio-code-110"},Object(a.b)("a",Object(o.a)({parentName:"h4"},{href:"https://github.com/microsoft/vscode"}),"Visual Studio Code")," ",Object(a.b)("a",Object(o.a)({parentName:"h4"},{href:"https://nodejs.org/en/docs/guides/debugging-getting-started/#visual-studio-code-1-10"}),"1.10+")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"In the Debug panel, click the settings icon to open ",Object(a.b)("inlineCode",{parentName:"li"},".vscode/launch.json"),'. Select "Node.js" for initial setup.'),Object(a.b)("li",{parentName:"ul"},"\ud83d\udccc You must tell vscode the target debugging port, otherwise vscode will try to debug Yoshi's main process in random generated port, so add ",Object(a.b)("inlineCode",{parentName:"li"},'"port" : 9229')," (or the port you choose)"),Object(a.b)("li",{parentName:"ul"},"Example launch.json -")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-json"}),'{\n  "name": "Run Tests",\n  "type": "node",\n  "request": "launch",\n  "args": ["test", "--debug-brk"],\n  "port": 9229,\n  "program": "${workspaceFolder}/node_modules/.bin/yoshi"\n}\n')),Object(a.b)("h4",{id:"jetbrains-webstorm-20171-and-other-jetbrains-ides"},Object(a.b)("a",Object(o.a)({parentName:"h4"},{href:"https://www.jetbrains.com/webstorm/"}),"JetBrains WebStorm")," ",Object(a.b)("a",Object(o.a)({parentName:"h4"},{href:"https://nodejs.org/en/docs/guides/debugging-getting-started/#jetbrains-webstorm-2017-1-and-other-jetbrains-ides"}),"2017.1+ and other JetBrains IDEs")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Create a new Node.js debug configuration\n",Object(a.b)("img",Object(o.a)({parentName:"li"},{src:"https://user-images.githubusercontent.com/11733036/79953459-8c24e880-8484-11ea-88d3-0438509be11a.png",alt:'WebStorm > new "Run/Debug configuration" popup'}))),Object(a.b)("li",{parentName:"ul"},"In order to manually tell WebStorm the debugging port, create another configuration, use type 'Attach to Node.js/Chrome'\n",Object(a.b)("img",Object(o.a)({parentName:"li"},{src:"https://user-images.githubusercontent.com/11733036/79953463-8deeac00-8484-11ea-9f0c-d0ac06946bac.png",alt:"WebStorm > Attach to Node.js/Chrome"}))),Object(a.b)("li",{parentName:"ul"},"Press debug in order to start the remote debugger configuration then start (without debugging) the 'Node.js' configuration")))}d.isMDXComponent=!0},257:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return g}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),d=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):b({},t,{},e)),n},l=function(e){var t=d(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),l=d(n),p=o,g=l["".concat(i,".").concat(p)]||l[p]||u[p]||a;return n?r.a.createElement(g,b({ref:t},s,{components:n})):r.a.createElement(g,b({ref:t},s))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:o,i[1]=b;for(var s=2;s<a;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);