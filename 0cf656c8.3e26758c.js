(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{113:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return s}));var r=n(2),o=n(6),i=(n(0),n(214)),a={id:"yoshi-flow-editor-runtime",title:"yoshi-flow-editor-runtime",sidebar_label:"yoshi-flow-editor-runtime"},l={id:"version-4.x/editor-flow/runtime-api/yoshi-flow-editor-runtime",title:"yoshi-flow-editor-runtime",description:"Package that exports various Higher Order Components (HOCs) and methods to reduce boilerplate on client's side and organize the app structure in a better way.",source:"@site/versioned_docs/version-4.x/editor-flow/runtime-api/yoshi-flow-editor-runtime.md",permalink:"/yoshi/docs/editor-flow/runtime-api/yoshi-flow-editor-runtime",editUrl:"https://github.com/wix/yoshi/edit/master/website/versioned_docs/version-4.x/editor-flow/runtime-api/yoshi-flow-editor-runtime.md",version:"4.x",lastUpdatedBy:"Artem Yavorsky",lastUpdatedAt:1594317869,sidebar_label:"yoshi-flow-editor-runtime",sidebar:"version-4.x/editor-flow",previous:{title:"Component Level",permalink:"/yoshi/docs/editor-flow/structure-api/component"},next:{title:"flowAPI",permalink:"/yoshi/docs/editor-flow/runtime-api/flow-api"}},p=[{value:"<code>WixSDK</code>",id:"wixsdk",children:[]},{value:"<code>BILogger</code>",id:"bilogger",children:[{value:"<code>BILoggerDefaults</code>",id:"biloggerdefaults",children:[]},{value:"Testing",id:"testing",children:[]}]},{value:"<code>translate</code>",id:"translate",children:[{value:"Testing",id:"testing-1",children:[]}]},{value:"<code>withExperiments</code>",id:"withexperiments",children:[{value:"Testing",id:"testing-2",children:[]}]}],c={rightToc:p};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Package that exports various Higher Order Components (HOCs) and methods to reduce boilerplate on client's side and organize the app structure in a better way."),Object(i.b)("h2",{id:"wixsdk"},Object(i.b)("inlineCode",{parentName:"h2"},"WixSDK")),Object(i.b)("p",null,"WixSDK is a HOC that loads ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/wix-private/fed-infra/blob/master/js-sdk-wrapper/src/types.ts"}),"IStaticWix")," object."),Object(i.b)("p",null,"It renders a ",Object(i.b)("inlineCode",{parentName:"p"},"children")," function with ",Object(i.b)("inlineCode",{parentName:"p"},"sdk")," argument:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"sdk"),": ",Object(i.b)("inlineCode",{parentName:"p"},"{ Wix: IWixStatic | null }")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'import { WixSDK } from "yoshi-flow-editor-runtime";\n\nexport default () => (\n  <WixSDK>{sdk =>\n    <SomeComp Wix={sdk.Wix} /> // IStaticWix | null\n  }</WixSDK>\n);\n')),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"sdk.Wix")," will be ",Object(i.b)("inlineCode",{parentName:"p"},"null")," if ",Object(i.b)("inlineCode",{parentName:"p"},"WixSDK")," is being used in Widget part and rendered in Viewer mode, so make sure you are checking if it's not ",Object(i.b)("inlineCode",{parentName:"p"},"null")," to use it."),Object(i.b)("h4",{id:"props"},"Props"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"isEditor")," - should be passed for Settings part. It triggers a ",Object(i.b)("inlineCode",{parentName:"p"},"WixSDK"),", so it will use strict types for ",Object(i.b)("inlineCode",{parentName:"p"},"sdk.Wix")," and it won't be ",Object(i.b)("em",{parentName:"p"},"optional"),"."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Settings.ts")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'import { WixSDK } from "yoshi-flow-editor-runtime";\n\nexport default () => (\n  <WixSDK isEditor>{sdk =>\n    <SomeComp Wix={sdk.Wix} /> // IStaticWix\n  }</WixSDK>\n);\n')),Object(i.b)("h2",{id:"bilogger"},Object(i.b)("inlineCode",{parentName:"h2"},"BILogger")),Object(i.b)("p",null,"Renders a ",Object(i.b)("inlineCode",{parentName:"p"},"children")," function with ",Object(i.b)("inlineCode",{parentName:"p"},"biLogger")," relevant for current environment."),Object(i.b)("p",null,"You can configure 2 different kinds of BI logger according to user's roles: ",Object(i.b)("inlineCode",{parentName:"p"},"owner")," and ",Object(i.b)("inlineCode",{parentName:"p"},"visitor"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Owner")," will be available in ",Object(i.b)("inlineCode",{parentName:"li"},"Settings")," panel."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Visitor")," will be available in ",Object(i.b)("inlineCode",{parentName:"li"},"Widget"),", ",Object(i.b)("inlineCode",{parentName:"li"},"controller")," and ",Object(i.b)("inlineCode",{parentName:"li"},"initAppForPage")," in ",Object(i.b)("inlineCode",{parentName:"li"},"viewer.app.ts"),".")),Object(i.b)("p",null,"After you generate a project, a demo BI logger (",Object(i.b)("inlineCode",{parentName:"p"},"bi-logger-editor-flow-template"),") will be added to ",Object(i.b)("inlineCode",{parentName:"p"},".application.json")," configuration.\nIt's a show case and should be finally repaced in ",Object(i.b)("inlineCode",{parentName:"p"},".application.json")," and ",Object(i.b)("inlineCode",{parentName:"p"},"package.json")," with user's BI logger schema.\nTo configure own BI logger, please read the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/wix-private/fed-handbook/blob/master/BI.md#overview"}),"fed-handbook BI section"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Settings.tsx")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"// Somewhere deep in the component tree\nconst ColorPicker = () => (\n  <BILogger owner>\n    {biLogger => (\n      <ColorPickerColorSpace\n        onChange={(color) => {\n          logger.logColorChange({ color });\n        }}\n      />\n    )}\n  </BILogger>\n);\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"controller.ts")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"const createController = async ({ flowAPI, controllerConfig }) => {\n  const { setProps } = controllerConfig;\n\n  onSomeAction = async () => {\n    // Do something...\n    await flowAPI.biLogger?.somethingWasDone({});\n  };\n\n  return {\n    async pageReady() {\n      setProps({\n        onSomeAction,\n      });\n      await flowAPI.biLogger?.templateWidgetLoaded({});\n    },\n  }\n}\n")),Object(i.b)("h3",{id:"biloggerdefaults"},Object(i.b)("inlineCode",{parentName:"h3"},"BILoggerDefaults")),Object(i.b)("p",null,"To update defaults for each event being called from the ",Object(i.b)("inlineCode",{parentName:"p"},"BILogger")," render prop, you can update the context by wrapping your root component,\nwhich contain consumers."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-Settings.tsx"}),"import { BILogger, BILoggerDefaults } from 'yoshi-flow-editor-runtime'\n\n<BILoggerDefaults defaults={{ someData: 'hey' }}>\n  <div>\n  // Somwhere deeper...\n  <BILogger owner>\n    {biLogger => (\n      <ColorPickerColorSpace\n        onChange={() => {\n          logger.logColorChange({ color }); // Event will include `someData` field.\n        }}\n      />\n    )}\n  </BILogger>\n  </div>\n</BILoggerDefaults>\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"To update defaults in controller, you can just call ",Object(i.b)("inlineCode",{parentName:"p"},"flowAPI.biLogger.util.updateDefaults(newDefaults)"),".")),Object(i.b)("h3",{id:"testing"},"Testing"),Object(i.b)("p",null,"For unit testing components that contain a BI logger you should wrap it in ",Object(i.b)("inlineCode",{parentName:"p"},"BILoggerProvider")," HOC imported from ",Object(i.b)("inlineCode",{parentName:"p"},"yoshi-flow-editor-runtime/test"),"."),Object(i.b)("p",null,"It accepts ",Object(i.b)("inlineCode",{parentName:"p"},"logger")," property which can be a plain object with bi methods you want to mock."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Widget.spec.tsx")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"import { BILoggerProvider } from 'yoshi-flow-editor-runtime/test';\n\nit('should send a BI event on button click', async () => {\n  const buttonClickedBIEvent = jest.fn();\n  const { getByTestId } = render(\n    <BILoggerProvider logger={{ onButtonClicked: buttonClickedBIEvent }}>\n      <Widget />\n    </BILoggerProvider>\n  );\n  expect(buttonClickedBIEvent).toHaveBeenCalled();\n});\n")),Object(i.b)("h2",{id:"translate"},Object(i.b)("inlineCode",{parentName:"h2"},"translate")),Object(i.b)("p",null,"It's a HOC from ",Object(i.b)("inlineCode",{parentName:"p"},"react-i18next")," that allows using translations for ",Object(i.b)("inlineCode",{parentName:"p"},"Widget")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Settings")," components."),Object(i.b)("p",null,"All translations should be located under ",Object(i.b)("inlineCode",{parentName:"p"},"assets/locales/messages_:LANGUAGE.json")," by default.\nIf you want to change the prefix of translations file name, set ",Object(i.b)("inlineCode",{parentName:"p"},"prefix")," field to ",Object(i.b)("inlineCode",{parentName:"p"},".application.json"),"'s translations object."),Object(i.b)("p",null,"\u26a0\ufe0f You should not use ",Object(i.b)("inlineCode",{parentName:"p"},"I18NextProvider"),". Editor flow already provides needed context based on website's language."),Object(i.b)("p",null,"Just wrapping any component will give an access to app's translations via ",Object(i.b)("inlineCode",{parentName:"p"},"t")," property:"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Widget.tsx")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"import { translate, InjectedTranslateProps } from 'yoshi-flow-editor-runtime';\n\nexport default translate()(({ t }: InjectedTranslateProps) => {\n  return <h1 data-hook=\"app-title\">{t('app.widget.welcome')}</h1>;\n});\n")),Object(i.b)("h3",{id:"testing-1"},"Testing"),Object(i.b)("p",null,"For unit testing components that use ",Object(i.b)("inlineCode",{parentName:"p"},"translation")," HOC, you can use ",Object(i.b)("inlineCode",{parentName:"p"},"I18NextProvider")," from ",Object(i.b)("inlineCode",{parentName:"p"},"yoshi-flow-editor-runtime/test"),"."),Object(i.b)("p",null,"It will configue 18n mock and won't send any additional network requests:"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Widget.spec.tsx")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"import { I18nextProvider } from 'yoshi-flow-editor-runtime/test';\n\nit('should render a title correctly', async () => {\n  const { getByTestId } = render(\n    <I18nextProvider>\n      <Widget />\n    </I18nextProvider>\n  );\n\n  expect(getByTestId('app-title').textContent).toBe('app.widget.welcome');\n});\n")),Object(i.b)("h2",{id:"withexperiments"},Object(i.b)("inlineCode",{parentName:"h2"},"withExperiments")),Object(i.b)("p",null,"Connects a React component to underlying experiments.\nA higher-order React component class that builds props from the experiments state and passes them to the wrapped component for Widget and Settings."),Object(i.b)("p",null,"\u26a0\ufe0f You should not use ",Object(i.b)("inlineCode",{parentName:"p"},"ExperimentsProvider"),". Editor flow already provides needed context based on your experiments configuration under ",Object(i.b)("inlineCode",{parentName:"p"},".application.json"),"."),Object(i.b)("p",null,"For more info about ",Object(i.b)("inlineCode",{parentName:"p"},"withExperiments")," HOC, please read ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/wix-private/fed-infra/tree/master/experiments/wix-experiments-react#withexperimentscomponent"}),"official README"),"."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Widget.tsx")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"import { withExperiments } from 'yoshi-flow-editor-runtime';\n\nexport default withExperiments<WidgetProps>(({ experiments }) => {\n  return <h1 data-hook=\"app-title\">{experiments.isEnabled('specs.scope.ShowEmoji') ? '\ud83d\udc4b' : 'Hey!'}</h1>;\n});\n")),Object(i.b)("h3",{id:"testing-2"},"Testing"),Object(i.b)("p",null,"Editor flow provides easy way to mock experiments you want to test via ",Object(i.b)("inlineCode",{parentName:"p"},"ExperimentsProvider")," from ",Object(i.b)("inlineCode",{parentName:"p"},"yoshi-flow-editor-runtime/test"),"."),Object(i.b)("p",null,"Just pass experiments needed to be mocked via ",Object(i.b)("inlineCode",{parentName:"p"},"experiments")," property:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"import { ExperimentsProvider } from 'yoshi-flow-editor-runtime/test';\n\nit('should render a title correctly', async () => {\n  const { getByTestId } = render(\n    <ExperimentsProvider experiments={{ 'specs.scope.ShowEmoji': true }}>\n      <Widget />\n    </ExperimentsProvider>\n  );\n\n  expect(getByTestId('app-title').textContent).toBe('\ud83d\udc4b');\n})\n")))}s.isMDXComponent=!0},214:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),s=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},b=function(e){var t=s(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),b=s(n),m=r,u=b["".concat(a,".").concat(m)]||b[m]||d[m]||i;return n?o.a.createElement(u,l({ref:t},c,{components:n})):o.a.createElement(u,l({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);